# .github/workflows/terraform.yml
name: Terraform CI/CD with OIDC

on:
  # Manual run with inputs
  workflow_dispatch:
    inputs:
      target_env:
        description: "Target environment (dev or prod)"
        required: true
        type: choice
        options: [dev, prod]
        default: dev
      action:
        description: "Terraform action"
        required: true
        type: choice
        options: [apply, destroy]
        default: apply

  # (Optional) keep auto runs; remove if you want only manual runs
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write      # OIDC
  contents: read

concurrency:
  group: terraform-${{ github.ref }}-${{ inputs.target_env || 'dev' }}
  cancel-in-progress: true

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  WORKDIR: infra
  AWS_REGION: us-east-1
  # IAM role to assume via OIDC
  AWS_ROLE_ARN: arn:aws:iam::097635932419:role/github-actions-ci-cd-pipeline-aws
  # Pass environment to Terraform (also available as TF_VAR_environment)
  TARGET_ENV: ${{ inputs.target_env || 'dev' }}

jobs:
  terraform:
    name: Terraform (${{ inputs.action || 'apply' }}) - ${{ inputs.target_env || 'dev' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKDIR }}

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.9.5

      # Init/validate
      - name: Terraform init
        run: terraform init -upgrade

      - name: Terraform fmt & validate
        run: |
          terraform fmt -check -recursive
          terraform validate

      # Plan always (good for logs)
      - name: Terraform plan (${{ env.TARGET_ENV }})
        run: terraform plan -no-color -var="environment=${TARGET_ENV}"

      # Apply or Destroy based on input
      - name: Terraform apply
        if: ${{ (inputs.action || 'apply') == 'apply' }}
        run: terraform apply -auto-approve -var="environment=${TARGET_ENV}"

      - name: Terraform destroy
        if: ${{ (inputs.action || 'apply') == 'destroy' }}
        run: terraform destroy -auto-approve -var="environment=${TARGET_ENV}"