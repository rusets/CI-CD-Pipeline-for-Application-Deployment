name: Terraform CI/CD with OIDC

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: dev
        type: choice
        options: [dev, prod]
      action:
        description: "Action to run"
        required: true
        default: apply
        type: choice
        options: [plan, apply, destroy]

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_REGION: us-east-1
  WORKDIR: infra
  # используй твою роль из ответа OIDC
  AWS_ROLE_ARN: arn:aws:iam::097635932419:role/github-actions-ci-cd-pipeline-aws

# проста и без экзотических выражений, чтобы не ловить YAML/expr ошибки
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKDIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.9.5

      - name: Init
        run: terraform init -upgrade

      - name: Format & Validate
        run: |
          terraform fmt -check -recursive
          terraform validate

      - name: Resolve environment (dev/prod)
        run: |
          ENV="${{ github.event.inputs.environment }}"
          if [ -z "$ENV" ]; then
            # если запуск от push/PR, берём dev по умолчанию
            ENV="dev"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "Using ENV=$ENV"

      - name: Plan
        if: ${{ github.event_name == 'pull_request' || github.event.inputs.action == 'plan' }}
        run: terraform plan -no-color -var="environment=${{ env.ENV }}"

      - name: Apply
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve -var="environment=${{ env.ENV }}"

      - name: Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve -var="environment=${{ env.ENV }}"